" Ryan Kuczka

" Basic Setup:
" ============
set nocompatible
filetype plugin indent on

" Load Plugins: {{{1
" =============
call plug#begin()
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-eunuch'
Plug 'takac/vim-commandcaps'
Plug 'bling/vim-airline'
Plug 'Valloric/YouCompleteMe'
Plug 'sjl/gundo.vim', { 'on': 'GundoToggle' }
Plug 'Yggdroot/indentLine'
Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
Plug 'scrooloose/syntastic'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'JazzCore/ctrlp-cmatcher'
Plug 'Lokaltog/vim-easymotion'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
" Color Schemes {{{2
Plug 'jonathanfilip/vim-lucius'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'
Plug 'w0ng/vim-hybrid'
" Syntax Files {{{2
Plug 'hdima/python-syntax', { 'for': 'python' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'evanmiller/nginx-vim-syntax', { 'for': 'nginx' }
Plug 'groenewege/vim-less', { 'for': 'less' }
call plug#end() " }}}1

let mapleader = ','

" Configure Plugins: {{{1
" ==================
" Fugitive {{{2
nnoremap <Leader>gs :Gstatus<CR>
" open the current file on github
nnoremap <Leader>gb :<C-R>=line('.')<CR>Gbrowse@ryan<CR>
vnoremap <Leader>gb :Gbrowse@ryan<CR>

" CommandCaps {{{2
let g:commandcaps_override = 1

" YouCompleteMe {{{2
let g:ycm_collect_identifiers_from_tags_files = 1

" Airline {{{2
let g:airline_powerline_fonts=1
let g:airline_theme='ryan'
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#fnamemod = ':t'

" Gundo {{{2
nnoremap <Leader>u :GundoToggle<CR>
let g:gundo_preview_bottom=1

" IndentLine {{{2
let g:indentLine_char = '┊'
let g:indentLine_setColors = 0

" Instant Markdown {{{2
let g:instant_markdown_slow = 1

" Syntastic {{{2
nnoremap <C-S> :SyntasticCheck<CR>
let g:syntastic_mode_map = {'mode': 'passive'}
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_python_checkers=["flake8"]
let g:syntastic_python_flake8_args='--ignore=E501,E128,E261,E262'
let g:syntastic_javascript_checkers=["jshint"]
let g:syntastic_javascript_jshint_args='--config /sites/ycharts/confs/developers/jshint_conf.json'

" CtrlP {{{2
let g:ctrlp_working_path_mode='wra'
let g:ctrlp_max_files=0
let g:ctrlp_user_command=['.git', 'cd %s && git ls-files . -co --exclude-standard', 'ag %s -l --nocolor -g ""']
let g:ctrlp_match_func={'match' : 'matcher#cmatch'}
let g:ctrlp_extensions=['buffertag']
let g:ctrlp_mruf_relative=1
nnoremap <Leader><C-P> :CtrlPBufTag<CR>

" EasyMotion {{{2
let g:EasyMotion_do_mapping = 0
map <Leader>f <Plug>(easymotion-f)
map <Leader>F <Plug>(easymotion-F)
map <Leader>n <Plug>(easymotion-vim-n)
map <Leader>N <Plug>(easymotion-vim-N)
map <Leader>s <Plug>(easymotion-s)
map <Leader>; <Plug>(easymotion-next)
map <Leader>. <Plug>(easymotion-repeat)

" GitGutter {{{2
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" Python Syntax {{{2
let g:python_version_2 = 1
let g:python_highlight_all = 1
let g:python_highlight_space_errors = 0

" Javascript Syntax {{{2
let g:javascript_ignore_javaScriptdoc = 1

" Standard Options: {{{1
" =================
" Syntax Highlighting {{{2
syntax on

set t_Co=256       " sets the number of colors to 256
let g:base16colorspace=256
colorscheme ryan-base16

" Window Options {{{2
set number
set nowrap         " disables word wrapping
set scrolloff=3    " ensures that at least 3 lines of context are always visible
set laststatus=2
set noshowmode
set noruler        " shows line,col in bottom right
set showcmd        " shows the partial command in the lower right
" turns tabs into , shows  for text extending beyond window
" and  for text extending left of window
set list listchars=tab:,extends:,precedes:

set timeout timeoutlen=1000 ttimeoutlen=10

" Sets GUI Font and options
if has('gui_running')
  set guifont=Sauce\ Code\ Powerline:h13
  set guioptions=egmrtc
else
  " Sets cursor to a bar in insert mode
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif
" Indentation {{{2
set tabstop=4      " sets the length of the tab to 4 spaces
set shiftwidth=4   " sets the (auto)indent to 4 spaces
set softtabstop=4  " sets number of spaces to insert for a <Tab>
set smarttab       " a <Tab> will insert 'shiftwidth' spaces
set expandtab      " a <Tab> is expanded to spaces in Insert mode
set autoindent     " auto indents
" Command Line {{{2
set wildmode=longest,list,full " specifies that pressing <Tab> will complete to longest common substring, then a list of options, then cycle through all options
set wildmenu       " command line completion will show a menu of matches
set wildignore=*.pyc " patterns to ignore for file name completion
" Folding {{{2
set foldmethod=marker " allows setting a marker to specify where a fold occurs
set foldmarker={{{,}}} " sets the fold marker to {{{ to start and }}} to end
set foldlevel=99
" Search {{{2
set incsearch      " highlights as you search
set hlsearch       " highlights search results
set ignorecase     " ignores case for search
set smartcase      " overrides ignorecase if search pattern has upper case letters
set gdefault       " defaults to the `g` flag for :s substitutions
set hidden         " doesn't unload a buffer when it is no longer in a window
" Etc {{{2
set backspace=eol,indent,start
set completeopt=menuone " show completion menu even if only one match
set eol            " ensures the last line in the file has an end of line
set virtualedit=block " only allows the cursor to go where there is no character in Visual Block mode
set undofile       " save/restore undo history
set undodir=~/.vim/undodir " store undo files in ~/.vim/undodir
set t_RV= ttymouse=xterm2
set mouse=a

set autoread       " when a file is changed by a program other than vim while a buffer is open, automatically reload it
set nostartofline  " makes it so G, gg, <C-D>, etc. don't move cursor to start of the line
set modeline       " Allow for modelines

set sessionoptions-=options " don't save options in sessions, it gets wonky

if exists('&macmeta')
  set macmeta
endif
" Useful Mappings: {{{1
" ================
" Movement {{{2
" Make j and k work better with wrapped lines
noremap j gj
noremap k gk
" J/K move 10 lines at a time
noremap J 10j
noremap K 10k
" Map old J (join lines) to <C-J>
nnoremap <Leader><C-J> J
" Keep search results in center of screen
nnoremap <silent>n nzz
nnoremap <silent>N Nzz
" Makes */# not move cursor to next match
nnoremap * *<C-O>
nnoremap # #<C-O>
" Shortcuts {{{2
" Sets \ to remove highlighting when in normal mode
nnoremap <silent>\ :noh<CR>
" Maps Y to y$ to work like D and C
nnoremap Y y$
" Make Q run the q macro instead of Ex mode
nnoremap Q @q
" Quick switch between alternate buffers
nnoremap <Leader><Leader><Space> <C-^>
" Quick kill buffer
nnoremap <silent> <Leader>bd <C-^>:bd #<CR>
" Syntax Debugging {{{2
" Allows looking up the syntax under the cursor
function! ShowSynStack()
  for id in synstack(line("."), col("."))
    echo synIDattr(id, "name")
  endfor
endfunction
nnoremap <F9> :call ShowSynStack()<CR>
nnoremap <F10> :echo "hi<" .synIDattr(synID(line('.'),col('.'),1),'name'). '> trans<'
            \ .synIDattr(synID(line('.'),col('.'),0),'name'). '> lo<'
            \ .synIDattr(synIDtrans(synID(line('.'),col('.'),1)),'name'). '>'<CR>

" Add the <C-A> and <C-E> commands to insert/command modes
inoremap <C-A> <C-O>^
inoremap <C-E> <C-O>$
cnoremap <C-A> <Home>

" Filetype Overrides: {{{1
" ===================
augroup FileTypeConfs
  autocmd!
  autocmd BufRead,BufNewFile *nginx* set filetype=nginx
  autocmd BufRead,BufNewFile *cron.txt set filetype=crontab
  autocmd BufRead,BufNewFile *.html set filetype=htmldjango
  autocmd BufRead,BufNewFile *.tpl set filetype=htmldjango
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.sh,zshrc,*deployment_notes.txt let b:is_bash=1 | set filetype=sh
augroup END " }}}1

" Miscellaneous Functions And Commands:
" =====================================
" Debug Statements: {{{1
" =================
" Insert debugger/ipdb statement
nnoremap <Leader><C-I> :call InsertDebugTrace()<CR>
function! InsertDebugTrace()
  if (&ft == 'python')
    normal! Oimport ipdb; ipdb.set_trace()
  elseif (&ft == 'javascript')
    normal! Odebugger;
  endif
endfunction

" Scratch Buffers: {{{1
" ================
function! ScratchBuf(...)
  if a:0 == 0
    let ft = &filetype
  else
    let ft = a:1
  endif

  new
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal buflisted
  exec 'setlocal filetype='.ft
endfunction
command! -nargs=? -complete=filetype Scratch call ScratchBuf(<f-args>)

" Trailing Whitespace: {{{1
" ====================
hi link TrailingWhitespace Error
match TrailingWhitespace /\s\+$/
let s:trailingwhitespace_ignore_filetypes = ['gitcommit']

function! s:match_ts(insert)
  if &modifiable && index(s:trailingwhitespace_ignore_filetypes, &ft) == -1
    if a:insert
      match TrailingWhitespace '\s\+\%#\@<!$'
    else
      match TrailingWhitespace '\s\+$'
    endif
  else
    call clearmatches()
  endif
endfunction

function! s:block_write_ts()
  if ! v:cmdbang && search('\s\+$', 'cnw')
        \&& index(s:trailingwhitespace_ignore_filetypes, &ft) == -1
    throw 'TrailingWhitespace: Aborting write due to trailing whitespace.'
  endif
endfunction

function! DeleteTS()
  execute '%s/\s\+$//e'
  call histdel('search', -1)
endfunction

augroup TrailingWhitespace
  autocmd!
  autocmd BufWinEnter,InsertLeave * call s:match_ts(0)
  autocmd InsertEnter * call s:match_ts(1)
  autocmd BufWinLeave * call clearmatches()
  autocmd BufWritePre * try | call s:block_write_ts() | catch /^TrailingWhitespace:/ | echoerr substitute(v:exception, '^\CTrailingWhitespace:\s*', '', '') | endtry
augroup END

nnoremap <silent> <Leader>d$ :call DeleteTS()<CR>
" }}}1

" try to source local vimrc
if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" vim:foldlevel=0
