scriptencoding utf-8
" Ryan Kuczka

" Basic Setup:
" ============
filetype plugin indent on

" Load Plugins: {{{1
" =============
call plug#begin()
Plug 'ryankuczka/vim-pyfold'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-characterize'
Plug 'tommcdo/vim-fubitive'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'itchyny/lightline.vim'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
Plug 'Yggdroot/indentLine'
Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
Plug 'Lokaltog/vim-easymotion'
Plug 'airblade/vim-gitgutter'
Plug 'wellle/targets.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'ap/vim-css-color'
Plug 'Konfekt/FastFold'
Plug 'PeterRincker/vim-argumentative'
if exists('$TMUX')
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'tmux-plugins/vim-tmux-focus-events'
  Plug 'tmux-plugins/vim-tmux'
endif
Plug 'w0rp/ale'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'zchee/deoplete-jedi', { 'for': 'python' }
  Plug 'carlitux/deoplete-ternjs', { 'for': 'javascript' }
  Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
else
  Plug 'Valloric/YouCompleteMe'
endif
" Color Schemes {{{2
Plug 'jonathanfilip/vim-lucius'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'
Plug 'w0ng/vim-hybrid'
Plug 'whatyouhide/vim-gotham'
Plug 'morhetz/gruvbox'
" Syntax Files {{{2
Plug 'hdima/python-syntax'
Plug 'chr4/nginx.vim'
Plug 'groenewege/vim-less'
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'
Plug 'leafgarland/typescript-vim'
Plug 'gavocanov/vim-js-indent'
Plug 'ingydotnet/yaml-vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'pearofducks/ansible-vim'
Plug 'Matt-Deacalion/vim-systemd-syntax'
call plug#end() " }}}1

let g:mapleader = ','
let g:maplocalleader = ','

" Configure Plugins: {{{1
" ==================
" Nvim Specific
if has('nvim')
  " Deoplete {{{2
  let g:deoplete#enable_at_startup = 1

  inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr> <C-h> deoplete#mappings#smart_close_popup()."\<C-h>"
  inoremap <expr> <BS> deoplete#mappings#smart_close_popup()."\<C-h>"
  " }}}2

" Vim Specific
else
  " YouCompleteMe {{{2
  let g:ycm_complete_in_comments = 1
  let g:ycm_python_binary_path = 'python3'
  let g:ycm_collect_identifiers_from_tags_files = 1
  let g:ycm_collect_identifiers_from_comments_and_strings = 1
  " }}}2
endif

" General Plugins
" ALE {{{2
nnoremap <C-S> :ALELint<CR>
let g:ale_lint_on_text_changed = 'never'
let g:ale_open_list = 1
let g:ale_linters = {
      \ 'javascript': ['eslint'],
      \ 'javascript.jsx': ['eslint'],
      \ }
let g:ale_python_flake8_options = '--max-line-length 120 --ignore E128,E261,E262,E402'

augroup AutoCloseLocList
  autocmd!
  autocmd BufWinLeave * if &filetype != 'qf' | silent! lclose | endif
augroup END

" Fugitive {{{2
nnoremap <Leader>gs <C-W>o:Gstatus<CR>15<C-W>_
" open the current file on github
nnoremap <Leader>gb :.Gbrowse<CR>
vnoremap <Leader>gb :Gbrowse<CR>

" fzf {{{2
let g:fzf_buffers_jump = 1

nnoremap <C-P> :Files<CR>

nmap <leader><leader><tab> <plug>(fzf-maps-n)
xmap <leader><leader><tab> <plug>(fzf-maps-x)
omap <leader><leader><tab> <plug>(fzf-maps-o)

" Lightline {{{2
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [['mode', 'paste'],
      \            ['gitbranch', 'readonly', 'filename', 'modified']],
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }

" Undotree {{{2
nnoremap <Leader>u :UndotreeToggle<CR>

" IndentLine {{{2
let g:indentLine_char = '┊'
let g:indentLine_setColors = 0

" Instant Markdown {{{2
let g:instant_markdown_slow = 1

" EasyMotion {{{2
let g:EasyMotion_do_mapping = 0
map <Leader>f <Plug>(easymotion-f)
map <Leader>F <Plug>(easymotion-F)
map <Leader>n <Plug>(easymotion-vim-n)
map <Leader>N <Plug>(easymotion-vim-N)
map <Leader>s <Plug>(easymotion-s)
map <Leader>; <Plug>(easymotion-next)
map <Leader>. <Plug>(easymotion-repeat)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" GitGutter {{{2
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" IncSearch {{{2
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" No Highlighting
let g:incsearch#auto_nohlsearch = 1
map n <Plug>(incsearch-nohl-n)
map N <Plug>(incsearch-nohl-N)
map * <Plug>(incsearch-nohl-*)N
map # <Plug>(incsearch-nohl-#)N
map g* <Plug>(incsearch-nohl-g*)N
map g# <Plug>(incsearch-nohl-g#)N
" n always forward / N always backward
let g:incsearch#consistent_n_direction = 1

" Argumentative {{{2
let g:argumentative_no_mappings = 1
nmap [, <Plug>Argumentative_Prev
nmap ], <Plug>Argumentative_Next
xmap [, <Plug>Argumentative_XPrev
xmap ], <Plug>Argumentative_XNext
nmap <, <Plug>Argumentative_MoveLeft
nmap >, <Plug>Argumentative_MoveRight

" Python Syntax {{{2
let g:python_highlight_all = 1
let g:python_highlight_space_errors = 0

" Javascript Syntax {{{2
let g:used_javascript_libs = 'jquery,angularjs,underscore,react'
let g:jsx_ext_required = 0

" Miscellaneous Functions And Commands:
" =====================================


" Standard Options: {{{1
" =================
" Syntax Highlighting {{{2
syntax on

" Enable true color support
set termguicolors

" Conceal character settings
set conceallevel=3

" Lucius Settings {{{3
let g:lucius_style = 'dark'
let g:lucius_contrast = 'low'
" }}}3

set background=dark
colorscheme gruvbox

" Never have background for Conceal
hi Conceal ctermbg=NONE guibg=NONE

if g:colors_name ==# 'NeoSolarized'
  hi Folded cterm=bold gui=bold
  hi Error ctermfg=12 ctermbg=15 guifg=#002b36 guibg=#dc322f
  hi GitGutterAdd ctermfg=2 ctermbg=0 guifg=#719e07 guibg=#073642
  hi GitGutterDelete ctermfg=1 ctermbg=0 guifg=#dc322f guibg=#073642
  hi GitGutterChange ctermfg=3 ctermbg=0 guifg=#b58900 guibg=#073642
  hi link GitGutterChangeDelete GitGutterChange
  if &background ==# 'light'
    hi GitGutterAdd ctermbg=7 guibg=#eee8d5
    hi GitGutterDelete ctermbg=7 guibg=#eee8d5
    hi GitGutterChange ctermbg=7 guibg=#eee8d5
  endif
elseif g:colors_name ==# 'hybrid' || g:colors_name ==# 'hybrid-light'
  hi Conceal ctermbg=NONE guibg=NONE
  hi Search ctermfg=0
  hi DiffDelete ctermfg=0
elseif g:colors_name ==# 'lucius'
  hi Conceal ctermbg=NONE guibg=NONE
  hi SignColumn ctermbg=238 guibg=#444444
  hi LineNr ctermbg=238 guibg=#444444
endif

" Window Options {{{2
set number
set nowrap         " disables word wrapping
set scrolloff=3    " ensures that at least 3 lines of context are always visible
set laststatus=2
set noshowmode
set noruler        " shows line,col in bottom right
set showcmd        " shows the partial command in the lower right
set lazyredraw     " don't redraw window while executing macros/etc.
" turns tabs into , shows  for text extending beyond window
" and  for text extending left of window
set list listchars=tab:,extends:,precedes:

set timeout timeoutlen=1000 ttimeoutlen=10

" Turn off bell and visualbell
set visualbell t_vb=

" Set terminal/mouse support
set t_RV=
set mouse=a

" Sets GUI Font and options
if has('gui_running')
  set guifont=Input\ Mono\ Compressed:h14
  set guioptions=gmtc
else
  " Sets cursor to a bar in insert mode
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif
" Indentation {{{2
set tabstop=4      " sets the length of the tab to 4 spaces
set shiftwidth=4   " sets the (auto)indent to 4 spaces
set softtabstop=4  " sets number of spaces to insert for a <Tab>
set smarttab       " a <Tab> will insert 'shiftwidth' spaces
set expandtab      " a <Tab> is expanded to spaces in Insert mode
set autoindent     " auto indents
set shiftround     " force indentation to multiple of shiftwidth

if has('linebreak')
  set linebreak      " break wrapped lines at normal characters instead of last
  let &showbreak = '↪ ' " start wrapped lines with this char
  if has('breakindent')
    set breakindent    " make wrapped lines have same indentation
  endif
endif
" Command Line {{{2
set wildmode=longest,list,full " specifies that pressing <Tab> will complete to longest common substring, then a list of options, then cycle through all options
set wildmenu       " command line completion will show a menu of matches
set wildignore=*.pyc " patterns to ignore for file name completion
" Folding {{{2
set foldmethod=marker " allows setting a marker to specify where a fold occurs
set foldmarker={{{,}}} " sets the fold marker to {{{ to start and }}} to end
set foldlevel=99
" Search {{{2
set incsearch      " highlights as you search
set hlsearch       " highlights search results
set ignorecase     " ignores case for search
set smartcase      " overrides ignorecase if search pattern has upper case letters
set gdefault       " defaults to the `g` flag for :s substitutions

set grepprg=ag\ --vimgrep
set grepformat=%f:%l:%c:%m

" Files/Buffers {{{2
set hidden         " doesn't unload a buffer when it is no longer in a window
set undofile
set undodir=~/.vim/undodir// " store undo files here
set directory=~/.vim/swapfiles// " store swap (.swp) files here
set backupdir=~/.vim/backups// " store backup files (~) here

" Etc {{{2
set backspace=eol,indent,start
set completeopt=menuone " show completion menu even if only one match
set endofline           " ensures the last line in the file has an end of line
set virtualedit=block   " only allows the cursor to go where there is no character in Visual Block mode

set autoread       " when a file is changed by a program other than vim while a buffer is open, automatically reload it
set nostartofline  " makes it so G, gg, <C-D>, etc. don't move cursor to start of the line
set modeline       " Allow for modelines

set diffopt=filler,vertical " add filler lines and always use vertical
set nojoinspaces   " only add one space when joining lines

set sessionoptions-=options " don't save options in sessions, it gets wonky

if exists('&macmeta')
  set macmeta
endif
" Neovim Options {{{2
if has('nvim')

  " Terminal scrollback size
  let g:terminal_scrollback_buffer_size = 100000

  " Insert mode when entering terminals
  augroup EnterTerm
    au WinEnter term://* call feedkeys('i')
  augroup END

  " Python paths
  let g:python_host_prog = expand('~/.virtualenvs/neovim2/bin/python')
  let g:python3_host_prog = expand('~/.virtualenvs/neovim/bin/python')
endif

" Useful Mappings: {{{1
" ================
" Movement {{{2
" Make j and k work better with wrapped lines
noremap j gj
noremap k gk
" Add the <C-A> and <C-E> commands to insert/command modes
inoremap <C-A> <C-O>^
inoremap <C-E> <C-O>$
cnoremap <C-A> <Home>

" Window Movement
nnoremap <C-H> <C-W>h
nnoremap <BS> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
if has('nvim')
  tnoremap <C-H> <C-\><C-N><C-W>h
  tnoremap <C-J> <C-\><C-N><C-W>j
  tnoremap <C-K> <C-\><C-N><C-W>k
  tnoremap <C-L> <C-\><C-N><C-W>l
endif

" Shortcuts {{{2
" Maps Y to y$ to work like D and C
nnoremap Y y$
" Make Q run the q macro instead of Ex mode
nnoremap Q @q
" Quick switch between alternate buffers
nnoremap <Leader><Leader><Space> <C-^>
" Quick re-select pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Syntax Debugging {{{2
" Allows looking up the syntax under the cursor
function! ShowSynStack()
  for l:id in synstack(line('.'), col('.'))
    echo synIDattr(l:id, 'name')
  endfor
endfunction
nnoremap <F9> :call ShowSynStack()<CR>
nnoremap <F10> :echo "hi<" .synIDattr(synID(line('.'),col('.'),1),'name'). '> trans<'
            \ .synIDattr(synID(line('.'),col('.'),0),'name'). '> lo<'
            \ .synIDattr(synIDtrans(synID(line('.'),col('.'),1)),'name'). '>'<CR>

" Folds {{{2
nnoremap zr zr:echo &foldlevel<CR>
nnoremap zm zm:echo &foldlevel<CR>
nnoremap zR zR:echo &foldlevel<CR>
nnoremap zM zM:echo &foldlevel<CR>


" Filetype Overrides: {{{1
" ===================
augroup FileTypeConfs
  autocmd!
  autocmd BufRead,BufNewFile *nginx* set filetype=nginx
  autocmd BufRead,BufNewFile *cron.txt set filetype=crontab
  autocmd BufRead,BufNewFile *.html set filetype=htmldjango
  autocmd BufRead,BufNewFile *.tpl set filetype=htmldjango
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.sh,zshrc,*deployment_notes.txt let b:is_bash=1 | set filetype=sh
  autocmd BufRead,BufNewFile *requirements*.txt set filetype=config
augroup END " }}}1

" Debug Statements: {{{1
" =================
" Insert debugger/ipdb statement
nnoremap <silent> <Leader><C-I> :call InsertDebugTrace()<CR>
function! InsertDebugTrace()
  if (&filetype ==# 'python')
    normal! Oimport ipdb; ipdb.set_trace()
  elseif (&filetype ==# 'javascript')
    normal! Odebugger;
  endif
  update
endfunction

" Scratch Buffers: {{{1
" ================
function! ScratchBuf(...)
  if a:0 == 0
    let l:ft = &filetype
  else
    let l:ft = a:1
  endif

  new
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal buflisted
  exec 'setlocal filetype='.l:ft
endfunction
command! -nargs=? -complete=filetype Scratch call ScratchBuf(<f-args>)

" Trailing Whitespace: {{{1
" ====================
hi link TrailingWhitespace Error
match TrailingWhitespace /\s\+$/
let s:trailingwhitespace_ignore_filetypes = ['gitcommit', 'unite', 'vimfiler', 'vim-plug']

function! s:match_ts(insert)
  if &modifiable && index(s:trailingwhitespace_ignore_filetypes, &filetype) == -1
    if a:insert
      match TrailingWhitespace '\s\+\%#\@<!$'
    else
      match TrailingWhitespace '\s\+$'
    endif
  else
    call clearmatches()
  endif
endfunction

function! s:block_write_ts()
  if ! v:cmdbang && search('\s\+$', 'cnw')
        \&& index(s:trailingwhitespace_ignore_filetypes, &filetype) == -1
    throw 'TrailingWhitespace: Aborting write due to trailing whitespace.'
  endif
endfunction

function! DeleteTS()
  let l:cursor_pos = getpos('.')
  " vint: -ProhibitCommandRelyOnUser -ProhibitCommandWithUnintendedSideEffect
  keepjumps keeppatterns %s/\s\+$//e
  " vint: +ProhibitCommandRelyOnUser +ProhibitCommandWithUnintendedSideEffect
  call setpos('.', l:cursor_pos)
endfunction

augroup TrailingWhitespace
  autocmd!
  autocmd BufWinEnter,InsertLeave * call s:match_ts(0)
  autocmd InsertEnter * call s:match_ts(1)
  autocmd BufWinLeave * call clearmatches()
  autocmd BufWritePre * try | call s:block_write_ts() | catch /^TrailingWhitespace:/ | echoerr substitute(v:exception, '^\CTrailingWhitespace:\s*', '', '') | endtry
augroup END

nnoremap <silent> <Leader>d$ :call DeleteTS()<CR>

" Prettify: {{{1
function! Prettify()
  if &filetype ==# 'xml'
    exe '%!xmllint --format -'
  elseif &filetype ==# 'json'
    exe '%!python -m json.tool'
  elseif &filetype ==# 'html' || &filetype ==# 'htmldjango'
    exe '%!python -Wignore -c "from bs4 import BeautifulSoup;import sys;s=BeautifulSoup(sys.stdin.read());print(s.prettify())"'
  endif
endfunction
command! Prettify call Prettify()

" TabNew: {{{1
function! TabNew(dir)
  tabnew
  if a:dir !=? ''
    execute 'lcd '.a:dir
  endif
endfunction
command! -complete=dir -nargs=1 TabNew call TabNew(<q-args>)

" Sticky Shift Key: {{{1
command! W w
" }}}1

" try to source local vimrc
if filereadable(glob('~/.vimrc.local'))
  source ~/.vimrc.local
endif

" vim:foldlevel=0
