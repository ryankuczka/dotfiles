#compdef manage.py
#autoload

# django zsh completion, based on pip completion

typeset -ga nul_args
nul_args=(
    '--settings=-[the Python path to a settings module.]:file:_files'
    '--pythonpath=-[a directory to add to the Python path.]::directory:_directories'
    '--traceback[print traceback on exception.]'
    "--version[show program's version number and exit.]"
    {-h,--help}'[show this help message and exit.]'
)

_managepy_commands() {
    # We cache the list of commands
    if (( ! $+djangocommandlist )); then
        zsh-django-cache-commands
        djangocommandlist=($(cat $DOTFILES_DIR/zsh/cache/django_commands))
    fi
    _wanted djangocommandlist expl 'commands' compadd -a djangocommandlist
}

_managepy_apps() {
    # We cache the list of apps
    if (( ! $+djangoapplist )); then
        zsh-django-cache-apps
        djangoapplist=($(cat $DOTFILES_DIR/zsh/cache/django_apps))
    fi
    _wanted djangoapplist expl 'apps' compadd -a djangoapplist
}

_managepy_migrate() {
    local arguments
    arguments=(
        {-v,--verbosity}'[Verbosity level; 0=minimal output, 1=normal output, 2=all output.]:Verbosity:((0\:minimal 1\:normal 2\:all))'
        '--noinput[Tells Django to NOT prompt the user for input of any kind.]'
        $nul_args
        '--all[Run the specified migration for all apps.]'
        '--list[List migrations noting those that have been applied.]'
        '--changes[List changes for migrations.]'
        '--skip[Will skip over out-of-order missing migrations.]'
        '--merge[Will run out-of-order missing migrations as they are - no rollbacks.]'
        '--no-initial-data[Skips loading initial data if specified.]'
        "--fake[Pretends to do the migrations, but doesn't actually execute them.]"
        "--db-dry-run[Doesn't execute the SQL generated by the db methods, and doesn't story a record that the migration(s) occurred. Useful to test migrations before applying them.]"
        "--delete-ghost-migrations[Tells South to delete any 'ghost' migrations (ones in the database but not on disk).]"
        "--ignore-ghost-migrations[Tells South to ignore any 'ghost' migrations (ones in the database but not on disk) and continue to apply new migrations.]"
    )
    _arguments -s $arguments && ret=0
    _managepy_apps
}

_managepy_schemamigration() {
    local arguments
    arguments=(
        {-v,--verbosity}'[Verbosity level; 0=minimal output, 1=normal output, 2=all output.]:Verbosity:((0\:minimal 1\:normal 2\:all))'
        '--noinput[Tells Django to NOT prompt the user for input of any kind.]'
        $nul_args
        '--freeze[Freeze the specified app(s). Provide an app name with each; use the option multiple times for multiple apps.]'
        '--stdout[Print the migration to stdout instead of writing it to a file.]'
        '--add-model[Generate a Create Table migration for the specified model.]'
        '--add-field[Generate an Add Column migration for the specified modelname.fieldname.]'
        '--add-index[Generate an Add Index migration for the specified modelname.fieldname.]'
        '--initial[Generate the initial schema for the app.]'
        '--auto[Attempt to automatically detect differences from the last migration.]'
        '--empty[Make a blank migration.]'
        '--update[Update the most recent migration instead of creating a new one. Rollback this migration if it is already applied.]'
    )
    _arguments -s $arguments && ret=0
    _managepy_apps
}

_managepy() {
    local curcontext=$curcontext ret=1

    if (( CURRENT == 2 )); then
        _managepy_commands
    else
        shift words
        (( CURRENT -- ))
        curcontext="${curcontext%:*:*}:managepy_$words[1]:"
        _call_function ret _managepy_$words[1]
    fi
}

compdef _managepy manage.py
compdef _managepy django
compdef _managepy django-admin.py
compdef _managepy django-manage
