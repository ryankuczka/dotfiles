#compdef manage.py
#autoload

# django zsh completion, based on pip completion

typeset -ga nul_args
nul_args=(
    {-v,--verbosity}'[Verbosity level; 0=minimal output, 1=normal output, 2=all output.]:Verbosity:((0\:minimal 1\:normal 2\:all))'
    '--settings=-[the Python path to a settings module.]:file:_files'
    '--pythonpath=-[a directory to add to the Python path.]::directory:_directories'
    '--traceback[Raise on exception.]'
    "--version[Show program's version number and exit.]"
    {-h,--help}'[Show this help message and exit.]'
    "--no-color[Don't colorize the command output.]"
)

_managepy_commands() {
    # We cache the list of commands
    if (( ! $+djangocommandlist )); then
        zsh-django-cache-commands
        djangocommandlist=($(cat $DOTFILES_DIR/zsh/cache/django_commands))
    fi
    _wanted djangocommandlist expl 'commands' compadd -a djangocommandlist
}

_managepy_apps() {
    # We cache the list of apps
    if (( ! $+djangoapplist )); then
        zsh-django-cache-apps
        djangoapplist=($(cat $DOTFILES_DIR/zsh/cache/django_apps))
    fi
    _wanted djangoapplist expl 'apps' compadd -a djangoapplist
}

_managepy_migrate() {
    local arguments
    arguments=(
        $nul_args
        '--noinput[Tells Django to NOT prompt the user for input of any kind.]'
        '--no-initial-data[Tells Django not to load any initial data after database synchronization.]'
        '--database[Nominates a data to synchronize. Defaults to the "default" database.]'
        {-l,--list}'[List migrations noting those that have been applied.]'
        '--fake[Mark migrations as run without actually running them.]'
    )
    _arguments -s $arguments && ret=0
    _managepy_apps
}

_managepy_makemigrations() {
    local arguments
    arguments=(
        $nul_args
        "--dry-run[Just show what migrations would be made; don't actually write them.]"
        '--merge[Enable fixing of migration conflicts.]'
        '--empty[Create an empty migration.]'
        '--noinput[Tells Django to NOT prompt the user for input of any kind.]'
    )
    _arguments -s $arguments && ret=0
    _managepy_apps
}

_managepy() {
    local curcontext=$curcontext ret=1

    if (( CURRENT == 2 )); then
        _managepy_commands
    else
        shift words
        (( CURRENT -- ))
        curcontext="${curcontext%:*:*}:managepy_$words[1]:"
        _call_function ret _managepy_$words[1]
    fi
}

compdef _managepy manage.py
compdef _managepy django
compdef _managepy django-admin.py
compdef _managepy django-manage
